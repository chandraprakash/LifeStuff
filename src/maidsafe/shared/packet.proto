package maidsafe;

// define types of messages
enum MessageType {
  ADD_CONTACT_RQST = 1;
  INSTANT_MSG = 2;
  HELLO_PING = 3;
  LOGOUT_PING = 4;
	EMAIL = 5;
}

message EndPoint {
  repeated bytes ip = 1;
  repeated uint32 port = 2;
}

message LivePresence {
  required bytes contact_id = 1;
  required bytes end_point = 2;
}

// BP General Message Structure
message GenericPacket {
  required bytes data = 1;
  required bytes signature = 2;
}

message BufferPacketInfo {
  required bytes owner = 1;
  required bytes owner_publickey = 2;
  repeated bytes users = 3;
}

message BufferPacketMessage {
  required bytes sender_id = 1;
  optional bytes sender_public_key = 2;
  required bytes RSAenc_key = 3;
  required bytes AESenc_message = 4;
  required MessageType type = 5;
  optional uint32 timestamp = 6;
}

message BufferPacket {
  repeated GenericPacket owner_info = 1;
  repeated GenericPacket messages = 2;
  repeated GenericPacket presence_notifications = 3;
}

message ValidatedBufferPacketMessage {
  required bytes sender = 1;
  required bytes message = 2;
  required bytes index = 3;
  required MessageType type = 4;
  optional uint32 timestamp = 5;
}

// Instant Messages
message ContactInfo {
  optional bytes name = 1;
  optional bytes birthday = 2;
  optional bytes office_number = 3;
  optional bytes gender = 4;
  optional int32 country = 5;
  optional bytes city = 6;
  optional int32 language = 7;
}

message ContactNotification {
  required int32 action = 1;
  optional ContactInfo contact = 2;
}

message InstantFileNotification {
  required bytes ser_mdm = 1;
  required bytes ser_dm = 2;
  required bytes filename = 3;
}

message PrivateShareNotification {
  required bytes name = 1;
  required bytes msid = 2;
  required bytes public_key = 3;
  optional bytes private_key = 4;
  repeated bytes admins = 5;
  repeated bytes readonlys = 6;
  required bytes dir_db_key = 7;
}

message EmailNotification {
  required bytes to = 1;
  optional bytes cc = 2;
  optional bytes bcc = 3;
}

message InstantMessage {
  required bytes sender = 1;
  required bytes message = 2;
  required int32 date = 3;
  optional ContactNotification contact_notification = 4;
  optional InstantFileNotification instantfile_notification = 5;
  optional PrivateShareNotification privateshare_notification = 6;
  optional bytes conversation = 7;
  optional EndPoint endpoint = 8;
  optional int32 status = 9;
  optional bytes subject = 10;
  optional EmailNotification email_notification = 11;

}

message StoreMessagesResult {
  required uint32 result = 1;
  required int32 stored_msgs = 2;
  repeated bytes failed = 3;
}

